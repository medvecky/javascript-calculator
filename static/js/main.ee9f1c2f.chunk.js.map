{"version":3,"sources":["features/calculator/reducerFunctions.js","features/calculator/Display.js","features/calculator/DisplayBlock.js","features/calculator/calculatorSlice.js","features/calculator/OpsPad.js","features/calculator/NumPad.js","features/calculator/Calculator.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["addNumberToExpression","state","action","expression","isCompletedExpression","payload","addNumberToCurrentValue","currentValue","includes","handleOperation","handleMinus","isMinusValid","slice","evaluate","handleExpressionsChain","isNumeric","RegExp","test","num","isNaN","result","eval","toString","handleNumber","handleDecimal","Display","props","Card","border","text","Body","className","content","DisplayBlock","Container","Row","Col","id","createSlice","name","initialState","reducers","clear","addNumber","addOperation","addDecimal","actions","selectExpression","calculator","selectCurrentValue","OpsPad","dispatch","useDispatch","keyPad","value","map","key","Button","variant","size","block","onClick","NumPad","Calculator","useSelector","xs","App","configureStore","reducer","calculatorReducer","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee9f1c2f.chunk.js","sourcesContent":["function addNumberToExpression(state, action) {\n    if (state.expression === '0' || isCompletedExpression(state)) {\n        if (action.payload !== '0') {\n            state.expression = action.payload;\n        }\n    } else {\n        state.expression += action.payload;\n    }\n}\n\nfunction addNumberToCurrentValue(state, action) {\n    if (state.currentValue === '0'\n        || \"*/+-=\".includes(state.currentValue)) {\n        state.currentValue = action.payload;\n    } else {\n        state.currentValue += action.payload;\n    }\n}\n\nfunction handleOperation(state, action) {\n    if (action.payload === '-') {\n        handleMinus(state, action);\n    } else if (state.currentValue !== action.payload) {\n        if (\"*/+-=\".includes(state.currentValue)) {\n            if (!isMinusValid(state)) {\n                state.expression = state.expression.slice(0, -3);\n            } else {\n                state.expression = state.expression.slice(0, -1);\n            }\n        }\n        state.expression += action.payload;\n        if (action.payload === '=') {\n            evaluate(state);\n            handleExpressionsChain(state);\n        } else {\n            state.currentValue = action.payload;\n        }\n    }\n}\n\nfunction handleMinus(state, action) {\n    if (state.expression === '0') {\n        state.expression = action.payload;\n        state.currentValue = action.payload;\n    } else if (isNumeric(state.currentValue)) {\n        state.expression += action.payload;\n        state.currentValue = action.payload;\n    } else if (isMinusValid(state)) {\n        state.expression += ' ' + action.payload;\n        state.currentValue = action.payload;\n    }\n}\n\nfunction isMinusValid(state) {\n    let pattern = new RegExp('[-\\/*+] -$')\n    return !pattern.test(state.expression);\n}\n\nfunction handleExpressionsChain(state) {\n    if (state.expression.includes('=')) {\n        state.expression = state.currentValue;\n    }\n}\n\nfunction isCompletedExpression(state) {\n    let pattern = new RegExp('.+=-?\\\\d+')\n    return pattern.test(state.expression);\n}\n\nfunction isNumeric(num) {\n    return !isNaN(num)\n}\n\nfunction evaluate(state) {\n    let expression = state.expression = state.expression.slice(0, -1);\n    if (!expression.includes('=')) {\n        let result = eval(expression).toString();\n        state.expression += '=' + result;\n        state.currentValue = result;\n    }\n}\n\nfunction handleNumber(state, action) {\n    if (isCompletedExpression(state)) {\n        state.expression = '0';\n        state.currentValue = '0';\n        addNumberToExpression(state, action);\n        addNumberToCurrentValue(state, action);\n    } else {\n        addNumberToExpression(state, action);\n        addNumberToCurrentValue(state, action);\n    }\n}\n\nfunction handleDecimal(state) {\n    if (!state.currentValue.includes('.')) {\n        if (\"*/+-=\".includes(state.currentValue)) {\n            state.currentValue = '0.';\n            state.expression += '0.';\n        } else {\n            state.currentValue += '.';\n            state.expression += '.';\n        }\n    }\n}\n\nexport {handleNumber, handleOperation, handleDecimal};","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport './Display.css';\n\nfunction Display(props) {\n    return(\n        <div>\n            <Card\n                border=\"info\"\n                text=\"info\"\n            >\n                <Card.Body className=\"align-right\">\n                    {props.content}\n                </Card.Body>\n            </Card>\n        </div>\n    );\n}\n\nexport default Display;","import React from \"react\";\nimport {Container} from \"react-bootstrap\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Display from \"./Display\";\n\nfunction DisplayBlock(props) {\n    return (\n        <div>\n          <Container >\n              <Row>\n                 <Col>\n                   <Display content={props.expression} />\n                 </Col>\n              </Row>\n              <Row>\n                  <Col id=\"display\" >\n                      <Display content={props.currentValue} />\n                  </Col>\n              </Row>\n          </Container>\n        </div>\n    );\n}\n export default DisplayBlock;","import {createSlice} from '@reduxjs/toolkit';\nimport {\n    handleNumber,\n    handleOperation,\n    handleDecimal\n} from './reducerFunctions';\n\nexport const slice = createSlice({\n    name: 'calculator',\n    initialState: {\n        expression: \"0\",\n        currentValue: \"0\"\n    },\n    reducers: {\n        clear: state => {\n            state.expression = \"0\";\n            state.currentValue = \"0\";\n        },\n        addNumber: (state, action) => {\n            handleNumber(state, action);\n        },\n        addOperation: (state, action) => {\n            handleOperation(state, action);\n        },\n        addDecimal: state => {\n            handleDecimal(state);\n        }\n    },\n});\n\nexport const {clear, addNumber, addOperation, addDecimal} = slice.actions;\n\nexport const selectExpression = state => state.calculator.expression;\nexport const selectCurrentValue = state => state.calculator.currentValue;\n\nexport default slice.reducer;\n","import React from \"react\";\nimport {Button, Container, Row} from \"react-bootstrap\";\nimport Col from \"react-bootstrap/Col\";\nimport { useDispatch } from 'react-redux';\nimport  {addOperation} from './calculatorSlice';\n\nfunction OpsPad() {\n    const dispatch = useDispatch();\n    let keys = [\n        {\n            id: \"add\",\n            value: \"+\"\n        },\n        {\n            id: \"subtract\",\n            value: \"-\"\n        },\n        {\n            id: \"multiply\",\n            value: \"*\"\n        },\n        {\n            id: \"divide\",\n            value: \"/\"\n        },\n        {\n            id: \"equals\",\n            value: \"=\"\n        }\n    ];\n\n    let keyPad = keys.map(key =>\n        <Row key={key.id}>\n            <Col>\n                <Button\n                    id={key.id}\n                    variant=\"outline-warning\"\n                    size=\"lg\"\n                    block\n                    onClick={() => dispatch(addOperation(key.value))}\n                >\n                    {key.value}\n                </Button>\n            </Col>\n        </Row>\n    );\n\n    return (\n        <div>\n            <Container>\n                {keyPad}\n            </Container>\n        </div>\n    );\n}\n\nexport default OpsPad;","import React from \"react\";\nimport {Container} from \"react-bootstrap\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport { useDispatch } from 'react-redux';\nimport {\n    clear,\n    addNumber,\n    addDecimal\n} from './calculatorSlice';\n\nfunction NumPad() {\n    const dispatch = useDispatch();\n\n    let keys = [\n        {\n            id: \"one\",\n            value: \"1\"\n        },\n        {\n            id: \"two\",\n            value: \"2\"\n        },\n        {\n            id: \"three\",\n            value: \"3\"\n        },\n        {\n            id: \"four\",\n            value: \"4\"\n        },\n        {\n            id: \"five\",\n            value: \"5\"\n        },\n        {\n            id: \"six\",\n            value: \"6\"\n        },\n        {\n            id: \"seven\",\n            value: \"7\"\n        },\n        {\n            id: \"eight\",\n            value: \"8\"\n        },\n        {\n            id: \"nine\",\n            value: \"9\"\n        }\n    ];\n\n    let keyPad = keys.map(key =>\n    <Col key={key.id}>\n        <Button\n            id={key.id}\n            variant=\"outline-info\"\n            block\n            size=\"lg\"\n            onClick={() => dispatch(addNumber(key.value))}\n        >\n            {key.value}\n        </Button>\n    </Col>\n    );\n    return(\n        <div>\n            <Container>\n                <Row>\n                    {keyPad.slice(6, 9)}\n                </Row>\n                <Row>\n                    {keyPad.slice(3, 6)}\n                </Row>\n                <Row>\n                    {keyPad.slice(0, 3)}\n                </Row>\n                <Row>\n                    <Col>\n                        <Button\n                            id=\"clear\"\n                            variant=\"outline-danger\"\n                            block\n                            size=\"lg\"\n                            onClick={() => dispatch(clear())}\n                        >\n                         C\n                        </Button>\n                    </Col>\n                    <Col>\n                        <Button\n                            id=\"zero\"\n                            variant=\"outline-info\"\n                            block\n                            size=\"lg\"\n                            onClick={() => dispatch(addNumber(\"0\"))}\n                        >\n                            0\n                        </Button>\n                    </Col>\n                    <Col>\n                    <Button\n                        id=\"decimal\"\n                        variant=\"outline-info\"\n                        block\n                        size=\"lg\"\n                        onClick={() => dispatch(addDecimal())}\n                    >\n                        .\n                    </Button>\n                </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default NumPad;","import React from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport DisplayBlock from \"./DisplayBlock\";\nimport './Calculator.css'\nimport OpsPad from \"./OpsPad\";\nimport NumPad from \"./NumPad\";\nimport {useSelector} from 'react-redux';\nimport {\n    selectCurrentValue,\n    selectExpression\n} from \"./calculatorSlice\";\n\nfunction Calculator() {\n    const expression = useSelector(selectExpression);\n    const currentValue = useSelector(selectCurrentValue);\n\n    return (\n        <div>\n            <Container className=\"main\">\n                <Row>\n                    <Col>\n                        <DisplayBlock\n                            expression={expression}\n                            currentValue={currentValue}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs=\"9\">\n                        <NumPad/>\n                    </Col>\n                    <Col>\n                        <OpsPad/>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default Calculator;","import React from 'react';\r\nimport ReactFCCtest from 'react-fcctest';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport Calculator from \"./features/calculator/Calculator\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <ReactFCCtest/>\r\n        <Calculator />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\nimport calculatorReducer from '../features/calculator/calculatorSlice';\n\nexport default configureStore({\n    reducer: {\n        calculator: calculatorReducer,\n    },\n});\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}